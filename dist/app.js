/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./components/controller/controller.ts":
/*!*********************************************!*\
  !*** ./components/controller/controller.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst model_1 = __importDefault(__webpack_require__(/*! ../model/model */ \"./components/model/model.ts\"));\nconst appView_1 = __importDefault(__webpack_require__(/*! ../view/appView */ \"./components/view/appView.ts\"));\nclass Controller {\n    constructor() {\n        this.model = new model_1.default();\n        this.view = new appView_1.default(this);\n        this.init();\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let cars;\n            cars = yield this.model.getCars('1');\n            this.view.drawGarageView(cars);\n            location.hash = 'garage';\n            window.addEventListener('hashchange', () => __awaiter(this, void 0, void 0, function* () {\n                this.refreshPage();\n            }));\n        });\n    }\n    refreshPage(page = '1') {\n        return __awaiter(this, void 0, void 0, function* () {\n            let data;\n            const base = location.hash.includes('?')\n                ? location.hash.split('?')[0]\n                : location.hash;\n            if (base.slice(1) === 'garage') {\n                this.view.garageView.currentPageNum = parseInt(page);\n                // (1) get garage data\n                data = yield this.model.getCars(page);\n                // (2) give data to view\n                this.view.currentView = this.view.garageView;\n                //\n            }\n            else if (base.slice(1) === 'winners') {\n                // (1) get winners data\n                const { items, count } = yield this.model.getWinners({\n                    page: '1',\n                    limit: 10,\n                    sort: 'time',\n                    order: 'ASC',\n                });\n                data = items;\n                // (2) give data to view\n                this.view.currentView = this.view.winnersView;\n            }\n            else {\n                return;\n            }\n            this.view.currentView.draw(data);\n        });\n    }\n    createCar(name, color) {\n        const data = {\n            name: name,\n            color: color,\n            id: ++this.model.idCounter,\n        };\n        console.log(data);\n        this.model.createCar(data);\n        this.refreshPage();\n        //then get a car and draw it\n    }\n    updateCar(name, color, id) {\n        const data = {\n            name: name,\n            color: color,\n            id: id,\n        };\n        console.log('updateCar controller');\n        this.model.updateCar(id.toString(), data);\n        this.refreshPage();\n    }\n    removeCar(id) {\n        this.model.deleteCar(id.toString());\n        this.refreshPage();\n    }\n    generateCars(id) {\n        const carBrands = [\n            'Ferrari',\n            'Porsche',\n            'Honda',\n            'Toyota',\n            'Audi',\n            'Jeep',\n            'Chrysler',\n            'Mazda',\n            'Jaguar',\n            'Ford Mustang',\n        ];\n        const carModels = [\n            'Model A',\n            'Model B',\n            'Model C',\n            'Model S',\n            'Model E',\n            'Model F',\n            'Model G',\n            'Model U',\n            'Model X',\n            'Model Z',\n        ];\n        const carColors = [\n            '#34568B',\n            '#FF6F61',\n            '#6B5B95',\n            '#88B04B',\n            '#F7CAC9',\n            '#92A8D1',\n            '#009B77',\n            '#DD4124',\n            '#363945',\n            '#EFE1CE',\n        ];\n        const generateRandomCars = (count = 100) => [...Array(count).keys()].map((n) => {\n            const randomBrand = carBrands[Math.floor(Math.random() * carBrands.length)];\n            const randomModel = carModels[Math.floor(Math.random() * carModels.length)];\n            const randomColor = carColors[Math.floor(Math.random() * carColors.length)];\n            const data = {\n                name: `${randomBrand} ${randomModel}`,\n                color: randomColor,\n                id: this.model.idCounter + n + 1,\n            };\n            this.model.createCar(data);\n        });\n        generateRandomCars();\n        this.model.idCounter = this.model.idCounter + 100;\n        this.refreshPage();\n    }\n    stopDriving(carId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stopBtn = document.querySelector(`button[data-engine-stop-id=\"${carId}\"]`);\n            yield this.model.stopEngine(carId);\n            const car = document.querySelector(`.car-svg[data-cid=\"${carId}\"]`);\n            this.animation(car, 1, 1);\n        });\n    }\n    startDriving(carId, context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!context) {\n                context = this;\n            }\n            const startBtn = document.querySelector(`button[data-engine-start-id=\"${carId}\"]`);\n            startBtn.disabled = true;\n            // enable stop btn\n            startBtn.nextElementSibling.disabled = false;\n            const { velocity, distance } = yield context.model.startEngine(carId);\n            const time = Math.round(distance / velocity);\n            console.log(time);\n            const car = document.querySelector(`.car-svg[data-cid=\"${carId}\"]`);\n            const { success } = yield context.model.drive(carId);\n            if (success) {\n                const flag = document.querySelector('.finish-line');\n                const htmlDist = Math.floor(context.getDistElem(car, flag));\n                context.animation(car, htmlDist, time);\n            }\n            return { success, carId, time };\n        });\n    }\n    animation(car, distance, animationTime) {\n        // distance is html distance from car to flag/finish-line\n        let start = null;\n        const state = { id: null };\n        function step(timestamp) {\n            if (!start)\n                start = timestamp;\n            const time = timestamp - start;\n            const passed = Math.min(Math.round(time * (distance / animationTime)), distance);\n            const percent = passed / distance;\n            const leftPercent = 90 * percent;\n            car.style.left = `${leftPercent}%`;\n            // calculate percent of left\n            // set left position\n            if (passed < distance) {\n                state.id = window.requestAnimationFrame(step);\n            }\n        }\n        // call first time\n        state.id = window.requestAnimationFrame(step);\n        return state;\n    }\n    getPosition(el) {\n        const { left } = el.getBoundingClientRect();\n        return {\n            x: left,\n        };\n    }\n    getDistElem(a, b) {\n        const aPos = this.getPosition(a);\n        const bPos = this.getPosition(b);\n        return Math.sqrt(Math.pow(aPos.x - bPos.x, 2));\n    }\n    race1(startDriving) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const promises = (_a = this.model.carsData) === null || _a === void 0 ? void 0 : _a.map(({ id }) => {\n                return startDriving(id.toString(), this);\n            });\n            const winner = yield this.raceAll1(promises, (_b = this.model.carsData) === null || _b === void 0 ? void 0 : _b.map((car) => car.id));\n            return winner;\n        });\n    }\n    raceAll1(promises, carIds) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!promises)\n                return undefined;\n            const { success, carId, time } = yield Promise.race(promises);\n            if (!success && carIds && promises) {\n                const failedIndex = carIds.findIndex((i) => i === +carId);\n                const restPromises = [\n                    ...promises.slice(0, failedIndex),\n                    ...promises.slice(failedIndex + 1, promises.length),\n                ];\n                const restIds = [\n                    ...carIds.slice(0, failedIndex),\n                    ...carIds.slice(failedIndex + 1, carIds.length),\n                ];\n                return this.raceAll1(restPromises, restIds);\n            }\n            return Object.assign(Object.assign({}, (((_a = this.model.carsData) === null || _a === void 0 ? void 0 : _a.find((car) => car.id === +carId)) ||\n                { name: 'A', id: -1, color: '#fff' })), { time: +(time / 1000).toFixed(2) });\n        });\n    }\n    raceAll(carIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!carIds)\n                return;\n            const results = [];\n            for (let i = 0; i < carIds.length; i++) {\n                const carId = carIds[i];\n                const result = yield this.startDriving(carId.toString());\n                if (result.success) {\n                    results.push(result);\n                }\n            }\n        });\n    }\n    startRace() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // set raceBtn to disabled = true\n            const winner = yield this.race1(this.startDriving);\n            if (!winner)\n                return;\n            yield this.model.saveWinner(winner);\n            const message = document.getElementById('winner-message');\n            if (message) {\n                message.innerHTML = `${winner.name} went first ${winner.time}s`;\n                message.style.opacity = '1';\n            }\n            // set resetBtn to disabled = false\n        });\n    }\n}\nexports[\"default\"] = Controller;\n\n\n//# sourceURL=webpack://async-race/./components/controller/controller.ts?");

/***/ }),

/***/ "./components/model/model.ts":
/*!***********************************!*\
  !*** ./components/model/model.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Model {\n    constructor() {\n        this.base = 'http://localhost:3000';\n        this.garage = `${this.base}/garage`;\n        this.engine = `${this.base}/engine`;\n        this.winners = `${this.base}/winners`;\n        this.getCars = (page, limit = 7) => __awaiter(this, void 0, void 0, function* () {\n            const response = (yield fetch(`${this.garage}?_page=${page}&_limit=${limit}`)).json();\n            this.carsData = yield response;\n            return response;\n        });\n        this.getAllCars = () => __awaiter(this, void 0, void 0, function* () {\n            const data = (yield fetch(`${this.garage}`)).json();\n            this.allCarsData = yield data;\n            return data;\n        });\n        this.getCar = (id) => __awaiter(this, void 0, void 0, function* () { return (yield fetch(`${this.garage}/${id}`)).json(); });\n        this.createCar = (data) => __awaiter(this, void 0, void 0, function* () {\n            const response = (yield fetch(this.garage, {\n                method: 'POST',\n                body: JSON.stringify(data),\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })).json();\n        });\n        this.create100Cars = (data) => __awaiter(this, void 0, void 0, function* () {\n            const response = (yield fetch(this.garage, {\n                method: 'PUT',\n                body: JSON.stringify([...data]),\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })).json();\n        });\n        this.deleteCar = (id) => __awaiter(this, void 0, void 0, function* () {\n            const response = (yield fetch(`${this.garage}/${id}`, {\n                method: 'DELETE',\n            })).json();\n        });\n        this.updateCar = (id, data) => __awaiter(this, void 0, void 0, function* () {\n            const response = (yield fetch(`${this.garage}/${id}`, {\n                method: 'PUT',\n                body: JSON.stringify(data),\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })).json();\n        });\n        this.startEngine = (id) => __awaiter(this, void 0, void 0, function* () {\n            return (yield fetch(`${this.engine}?id=${id}&status=started`, { method: 'PATCH' })).json();\n        });\n        this.stopEngine = (id) => __awaiter(this, void 0, void 0, function* () { return (yield fetch(`${this.engine}?id=${id}&status=stopped`)).json(); });\n        this.drive = (id) => __awaiter(this, void 0, void 0, function* () {\n            const res = yield fetch(`${this.engine}?id=${id}&status=drive`, {\n                method: 'PATCH',\n            }).catch();\n            return res.status !== 200 ? { success: false } : Object.assign({}, (yield res.json()));\n        });\n        this.getWinners = (options) => __awaiter(this, void 0, void 0, function* () {\n            const response = yield fetch(`${this.winners}?_page=${options.page}&_limit=${options.limit}${this.getSortOrder(options.sort, options.order)}`);\n            const items = yield response.json();\n            return {\n                items: items /* await Promise.all(\n                  items.map(async (winner: IWinners) => ({\n                    ...winner,\n                    car: await this.getCar(winner.id.toString()),\n                  }))\n                )*/,\n                count: response.headers.get('X-Total-Count'),\n            };\n        });\n        this.getWinner = (id) => __awaiter(this, void 0, void 0, function* () { return (yield fetch(`${this.winners}/${id}`)).json(); });\n        this.getWinnerStatus = (id) => __awaiter(this, void 0, void 0, function* () { return (yield fetch(`${this.winners}/${id}`)).status; });\n        this.deleteWinner = (id) => __awaiter(this, void 0, void 0, function* () { return (yield fetch(`${this.winners}/${id}`, { method: 'DELETE' })).json(); });\n        this.createWinner = (data) => __awaiter(this, void 0, void 0, function* () {\n            const response = (yield fetch(this.winners, {\n                method: 'POST',\n                body: JSON.stringify(data),\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })).json();\n        });\n        this.updateWinner = (id, data) => __awaiter(this, void 0, void 0, function* () {\n            return (yield fetch(`${this.winners}/${id}`, {\n                method: 'PUT',\n                body: JSON.stringify(data),\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })).json();\n        });\n        this.saveWinner = (car) => __awaiter(this, void 0, void 0, function* () {\n            if (car && Object.keys(car).length === 1)\n                return;\n            if (!car)\n                return;\n            const winnerStatus = yield this.getWinnerStatus(car.id.toString());\n            if (winnerStatus === 404) {\n                yield this.createWinner({\n                    id: car.id,\n                    wins: 1,\n                    time: car.time,\n                });\n            }\n            else {\n                const winner = yield this.getWinner(car.id.toString());\n                yield this.updateWinner(car.id.toString(), {\n                    id: car.id,\n                    wins: winner.wins + 1,\n                    time: car.time < winner.time ? car.time : winner.time,\n                });\n            }\n        });\n        this.allCarsData = undefined;\n        this.idCounter = 4;\n    }\n    getSortOrder(sort, order) {\n        return sort && order ? `&_sort=${sort}&_order=${order}` : '';\n    }\n}\nexports[\"default\"] = Model;\n\n\n//# sourceURL=webpack://async-race/./components/model/model.ts?");

/***/ }),

/***/ "./components/view/abstractComponentView.ts":
/*!**************************************************!*\
  !*** ./components/view/abstractComponentView.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass AbstractComponentView {\n    constructor() { }\n}\nexports[\"default\"] = AbstractComponentView;\n\n\n//# sourceURL=webpack://async-race/./components/view/abstractComponentView.ts?");

/***/ }),

/***/ "./components/view/abstractPageView.ts":
/*!*********************************************!*\
  !*** ./components/view/abstractPageView.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass AbstractPageView {\n    constructor() {\n        this.pageContainer = document.getElementById('page-container');\n    }\n}\nexports[\"default\"] = AbstractPageView;\n\n\n//# sourceURL=webpack://async-race/./components/view/abstractPageView.ts?");

/***/ }),

/***/ "./components/view/appView.ts":
/*!************************************!*\
  !*** ./components/view/appView.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst winnersView_1 = __importDefault(__webpack_require__(/*! ./winnersView */ \"./components/view/winnersView.ts\"));\nconst garageView_1 = __importDefault(__webpack_require__(/*! ./garageView */ \"./components/view/garageView.ts\"));\nclass AppView {\n    constructor(controller) {\n        this.controller = controller;\n        this.garageView = new garageView_1.default(this.controller);\n        this.winnersView = new winnersView_1.default(this.controller);\n        this.currentView = this.garageView;\n        this.garageBtn = document.getElementById('garage-btn');\n        this.winnersBtn = document.getElementById('winners-btn');\n    }\n    drawGarageView(data) {\n        this.currentView = this.garageView;\n        this.currentView.draw(data);\n    }\n    drawWinnersView(data) {\n        this.currentView = this.winnersView;\n        this.currentView.draw(data);\n    }\n}\nexports[\"default\"] = AppView;\n\n\n//# sourceURL=webpack://async-race/./components/view/appView.ts?");

/***/ }),

/***/ "./components/view/carView.ts":
/*!************************************!*\
  !*** ./components/view/carView.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst abstractComponentView_1 = __importDefault(__webpack_require__(/*! ./abstractComponentView */ \"./components/view/abstractComponentView.ts\"));\nclass CarView extends abstractComponentView_1.default {\n    //   data: ICars | IWinners | undefined;\n    constructor() {\n        super();\n    }\n    draw(container, data, carLen, currentPage) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const garageSection = document.createElement('section');\n            garageSection.classList.add('garage-section');\n            const h2 = document.createElement('h2');\n            h2.innerHTML = `Garage (${carLen})`;\n            garageSection.appendChild(h2);\n            const h3 = document.createElement('h3');\n            h3.innerHTML = `Page #${currentPage}`;\n            h3.setAttribute('id', 'page-num');\n            garageSection.appendChild(h3);\n            const carsContainer = document.createElement('div');\n            carsContainer.classList.add('road-bg');\n            const messageP = document.createElement('p');\n            messageP.setAttribute('id', 'winner-message');\n            messageP.style.opacity = '0';\n            carsContainer.appendChild(messageP);\n            const finishLine = document.createElement('div');\n            finishLine.classList.add('finish-line', 'checkered');\n            carsContainer.appendChild(finishLine);\n            data.forEach((car) => {\n                const carSection = document.createElement('div');\n                carSection.classList.add('car-section');\n                carSection.innerHTML = `<div class=\"car-options-select\">\n        <button class=\"blue-btn select-btn\">Select</button>\n        <button class=\"blue-btn select-btn\">Remove</button>\n        <p class=\"car-name\">${car.name}</p>\n    </div>\n    <div class=\"car-options-select\">\n        <button class=\"move-btn play-btn\" data-engine-start-id=${car.id}>A</button>\n        <button class=\"move-btn stop-btn\" data-engine-stop-id=${car.id} disabled>B</button>\n    </div>${this.renderCar(car.id, car.name, car.color)}`;\n                carsContainer.appendChild(carSection);\n            });\n            garageSection.appendChild(carsContainer);\n            container.appendChild(garageSection);\n        });\n    }\n    renderCar(id, name, color) {\n        return `<svg class=\"car-svg\" data-cid=\"${id}\" data-cname=\"${name}\" style=\"left: 0%\" width=\"115.05\" height=\"50\" version=\"1.1\" viewBox=\"0 0 30.44 13.229\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g transform=\"translate(8.6053 -8.6054)\">\n     <path class=\"body-color\" d=\"m21.835 15.22c0-2.5285-0.36072-4.8634-3.4082-6.0325h-22.533c-4.5261 0.33275-4.4988 3.0134-4.4988 6.0325s-0.02735 5.6997 4.4988 6.0325h22.533c3.0474-1.1691 3.4082-3.5039 3.4082-6.0325z\" fill=\"${color}\" opacity=\".996\"/>\n     <path d=\"m13.668 15.22c0-1.3359-0.20227-2.9666-1.0933-4.7097l-4.5403 0.91741c0.46362 0.93791 0.51336 2.8097 0.51229 3.7923 0.0011 0.98256-0.04867 2.8545-0.51229 3.7924l4.5403 0.91741c0.891-1.743 1.0933-3.3739 1.0933-4.7098z\" fill=\"#444\"/>\n     <path d=\"m21.583 15.22s-0.01513-1.6311-0.1354-1.9328c-0.12027-0.30167-0.49299-0.52347-0.49299-0.52347 0.09908 0.85107 0.10502 1.8351 0.10344 2.4563 0.0016 0.62121-0.0044 1.6053-0.10344 2.4564 0 0 0.37272-0.22181 0.49299-0.52347 0.12027-0.30167 0.1354-1.9329 0.1354-1.9329z\" fill=\"#313131\"/>\n     <path d=\"m11.795 20.22-4.3332-0.8277c-2.1222-0.04343-4.202-0.1187-6.5729 0.02435l-2.1423 0.6086c4.2125 0.31607 8.7236 0.27937 13.048 0.19475z\" fill=\"#444\"/>\n     <path d=\"m-0.38747 11.474c-1.4827-0.21965-3.4359-0.2778-4.2173-0.12048-0.78141 0.15731-0.94683 2.5378-0.94683 3.8661 0 1.3284 0.16542 3.709 0.94683 3.8663 0.78141 0.15731 2.7346 0.09916 4.2173-0.12048-0.29844-1.1553-0.44759-2.4575-0.44759-3.7458s0.14915-2.5904 0.44759-3.7457z\" fill=\"#444\"/>\n     <path d=\"m21.423 17.812-0.57206 0.31384c-0.33767 0.67174-0.95405 1.4683-1.7346 2.251 0.21326-0.0081 0.38054 0.02757 0.68855-0.14632 0.30802-0.17389 1.2085-1.1294 1.6181-2.4185z\" fill=\"#fff\"/>\n     <path d=\"m-7.9529 17.692s0.12266 0.0127 0.20657 0.1291c0.0839 0.11639-4e-3 1.5597 1.5148 2.539l-0.21517 0.1205c-0.653-0.34979-1.0996-0.82612-1.4805-1.8247z\" fill=\"#ff2d2d\"/>\n     <path d=\"m10.784 20.102h-0.40453v0.2496h-0.24099l-0.45617 1.4804s0.23747 0.03735 0.49059-0.16353c0.25312-0.20088 0.44088-0.93122 0.61109-1.5665z\" fill=\"#383838\"/>\n     <path d=\"m11.795 10.22-4.3332 0.8277c-2.1222 0.04343-4.202 0.1187-6.5729-0.02435l-2.1423-0.6086c4.2125-0.31607 8.7236-0.27937 13.048-0.19475z\" fill=\"#444\"/>\n     <path d=\"m21.423 12.628-0.57206-0.31384c-0.33767-0.67174-0.95405-1.4683-1.7346-2.251 0.21326 0.0081 0.38054-0.02757 0.68855 0.14632 0.30802 0.17389 1.2085 1.1294 1.6181 2.4185z\" fill=\"#fff\"/>\n     <path d=\"m-7.9529 12.748s0.12266-0.0127 0.20657-0.1291c0.0839-0.11639-4e-3 -1.5597 1.5148-2.539l-0.21517-0.1205c-0.653 0.34979-1.0996 0.82612-1.4805 1.8247z\" fill=\"#ff2d2d\"/>\n     <path d=\"m10.784 10.338h-0.40453v-0.2496h-0.24099l-0.45617-1.4804s0.23747-0.037348 0.49059 0.16353c0.25312 0.20088 0.44088 0.93122 0.61109 1.5665z\" fill=\"#383838\"/>\n    </g>\n   </svg>`;\n    }\n}\nexports[\"default\"] = CarView;\n\n\n//# sourceURL=webpack://async-race/./components/view/carView.ts?");

/***/ }),

/***/ "./components/view/garageView.ts":
/*!***************************************!*\
  !*** ./components/view/garageView.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst abstractPageView_1 = __importDefault(__webpack_require__(/*! ./abstractPageView */ \"./components/view/abstractPageView.ts\"));\nconst settingsView_1 = __importDefault(__webpack_require__(/*! ./settingsView */ \"./components/view/settingsView.ts\"));\nconst carView_1 = __importDefault(__webpack_require__(/*! ./carView */ \"./components/view/carView.ts\"));\nclass GarageView extends abstractPageView_1.default {\n    constructor(controller) {\n        super();\n        this.settingsView = new settingsView_1.default();\n        this.carView = new carView_1.default();\n        this.controller = controller;\n        this.selectedId = 0;\n        this.currentPageNum = 1;\n    }\n    draw(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.settingsView.draw(this.pageContainer);\n            if (data) {\n                const carLen = (yield this.controller.model.getAllCars()).length;\n                yield this.carView.draw(this.pageContainer, data, carLen, this.currentPageNum);\n                const disabledPrev = this.currentPageNum === 1 ? 'disabled' : '';\n                const nextPage = this.currentPageNum + 1;\n                const disabledNext = nextPage * 7 <= carLen ? '' : 'disabled';\n                this.pageContainer.innerHTML += ` <a class=\"blue-btn href-btn\" id=\"prev-btn\" ${disabledPrev} \n      >Prev</a\n    >\n    <a class=\"blue-btn href-btn\" id=\"next-btn\" ${disabledNext}\n      >Next</a\n    >`;\n            }\n            this.setEventListeners();\n        });\n    }\n    setEventListeners() {\n        const settings = document.querySelector('.settings-section');\n        if (settings) {\n            settings.addEventListener('click', (e) => {\n                const target = e.target;\n                switch (target.id) {\n                    case 'create-btn':\n                        let [name, color] = [\n                            ...this.getCreateInputData('create-name-display', 'create-color'),\n                        ];\n                        if (name) {\n                            this.controller.createCar(name, color);\n                        }\n                        else {\n                            alert('Please, enter a car name to create a car section');\n                        }\n                        console.log(name, color);\n                        break;\n                    case 'update-btn':\n                        if (this.selectedId !== 0) {\n                            let [name, color] = [\n                                ...this.getCreateInputData('update-name-display', 'update-color'),\n                            ];\n                            if (name) {\n                                this.controller.updateCar(name, color, this.selectedId);\n                            }\n                            else {\n                                alert('Please, enter a car name to update a car');\n                            }\n                        }\n                        console.log('update');\n                        break;\n                    case 'race-btn':\n                        this.controller.startRace();\n                        break;\n                    case 'reset-btn':\n                        this.controller.refreshPage();\n                        break;\n                    case 'generate-btn':\n                        this.controller.generateCars(this.selectedId);\n                        break;\n                }\n            });\n        }\n        const carsSection = document.querySelector('.road-bg');\n        if (carsSection) {\n            carsSection.addEventListener('click', (e) => {\n                var _a, _b;\n                const target = e.target;\n                switch (target.innerText) {\n                    case 'Select': {\n                        const parent = (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;\n                        const car = parent.querySelector('.car-svg');\n                        if (!car)\n                            return;\n                        const id = parseInt(car.dataset.cid);\n                        this.selectedId = id;\n                        document.getElementById('update-name-display').value = car.dataset.cname;\n                        break;\n                    }\n                    case 'Remove': {\n                        const parent = (_b = target.parentElement) === null || _b === void 0 ? void 0 : _b.parentElement;\n                        const car = parent.querySelector('.car-svg');\n                        if (!car)\n                            return;\n                        const id = parseInt(car.dataset.cid);\n                        this.controller.removeCar(id);\n                    }\n                    case 'A': {\n                        const carId = target.dataset.engineStartId;\n                        this.controller.startDriving(carId);\n                        break;\n                    }\n                    case 'B': {\n                        const carId = target.dataset.engineStartId;\n                        this.controller.stopDriving(carId);\n                        console.log('stop engine');\n                        break;\n                    }\n                }\n            });\n        }\n        const prevBtn = document.getElementById('prev-btn');\n        const nextBtn = document.getElementById('next-btn');\n        if (prevBtn) {\n            prevBtn.addEventListener('click', (e) => {\n                if (this.currentPageNum > 1) {\n                    this.currentPageNum--;\n                    this.controller.refreshPage(this.currentPageNum.toString());\n                }\n            });\n        }\n        if (nextBtn) {\n            nextBtn.addEventListener('click', (e) => __awaiter(this, void 0, void 0, function* () {\n                const carLen = (yield this.controller.model.getAllCars()).length;\n                const nextPage = this.currentPageNum + 1;\n                if (nextPage * 7 <= carLen) {\n                    this.currentPageNum++;\n                    this.controller.refreshPage(this.currentPageNum.toString());\n                }\n            }));\n        }\n    }\n    getCreateInputData(nameInputId, colorInput) {\n        return [\n            document.getElementById(nameInputId).value,\n            document.getElementById(colorInput).value,\n        ];\n    }\n}\nexports[\"default\"] = GarageView;\n\n\n//# sourceURL=webpack://async-race/./components/view/garageView.ts?");

/***/ }),

/***/ "./components/view/settingsView.ts":
/*!*****************************************!*\
  !*** ./components/view/settingsView.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst abstractComponentView_1 = __importDefault(__webpack_require__(/*! ./abstractComponentView */ \"./components/view/abstractComponentView.ts\"));\nclass SettingsView extends abstractComponentView_1.default {\n    constructor() {\n        super();\n    }\n    draw(container) {\n        container.innerHTML = '';\n        container.innerHTML += `<section class=\"settings-section\">\n        <div class=\"color-section\">\n            <input type=\"text\" id=\"create-name-display\"></input>\n            <input type=\"color\" id=\"create-color\" name=\"create-color\" value=\"#cbdae5\" />\n            <button class=\"blue-btn\" id=\"create-btn\">Create</button>\n        </div>\n        <div class=\"color-section\">\n            <input type=\"text\" id=\"update-name-display\"></input>\n            <input type=\"color\" id=\"update-color\" name=\"update-color\" value=\"#798791\" />\n            <button class=\"blue-btn\" id=\"update-btn\">Update</button>\n        </div>\n        <div class=\"other-settings\">\n            <button class=\"green-btn\" id=\"race-btn\">Race</button>\n            <button class=\"green-btn\" id=\"reset-btn\">Reset</button>\n            <button class=\"blue-btn\" id=\"generate-btn\">Generate Cars</button>\n        </div>\n    </section>`;\n    }\n    bindCreateCar(handler) {\n        const createBtn = document.getElementById('create-btn');\n        createBtn.addEventListener('click', (e) => {\n            e.preventDefault();\n            // get text input for name and color\n            // check if inputs are not empty strings\n            // if valid call handler\n            handler('tesla', '#ff0000');\n            // reset inputs\n        });\n    }\n}\nexports[\"default\"] = SettingsView;\n\n\n//# sourceURL=webpack://async-race/./components/view/settingsView.ts?");

/***/ }),

/***/ "./components/view/winnersView.ts":
/*!****************************************!*\
  !*** ./components/view/winnersView.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst abstractPageView_1 = __importDefault(__webpack_require__(/*! ./abstractPageView */ \"./components/view/abstractPageView.ts\"));\nclass WinnersView extends abstractPageView_1.default {\n    constructor(controller) {\n        super();\n        this.lastTimeOrder = 'ASC';\n        this.lastWinsOrder = 'ASC';\n        this.lastNameOrder = 'ASC';\n        this.controller = controller;\n    }\n    draw(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.pageContainer.innerHTML = '';\n            this.pageContainer.innerHTML = `<h2>Winners <span>(${data.length})</span></h2><h3>Page #1</h3><table class=\"winners-list\"><thead><tr><th>Number</th><th>Car</th><th id=\"sort-id\" data-order='${this.lastNameOrder}'>Name</th><th id=\"sort-wins\" data-order='${this.lastWinsOrder}'>Wins</th><th id=\"sort-time\" data-order='${this.lastTimeOrder}'>Best time (seconds)</th></tr></thead>\n    <tbody>\n    ${yield this.drawWinners(data)}\n\n    </tbody>\n    </table>`;\n            this.initListeners();\n        });\n    }\n    drawWinners(winners) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rows = winners.map((winner, i) => {\n                var _a;\n                const car = Object.assign({}, (_a = this.controller.model.carsData) === null || _a === void 0 ? void 0 : _a.find((car) => car.id === winner.id));\n                return car\n                    ? `<tr><td>${i + 1}</td><td class=\"fix-car\">${this.controller.view.garageView.carView.renderCar(car.id, car.name, car.color)}</td><td>${car.name}</td> <td>${winner.wins}</td> <td>${winner.time}</td></tr>`\n                    : '';\n            });\n            return rows.join('');\n        });\n    }\n    initListeners() {\n        const sortTimeBtn = document.getElementById('sort-time');\n        if (sortTimeBtn) {\n            sortTimeBtn.addEventListener('click', (e) => __awaiter(this, void 0, void 0, function* () {\n                const target = e.target;\n                console.log(target);\n                console.log(target.dataset.order);\n                let order = target.dataset.order == 'ASC' ? 'DESC' : 'ASC';\n                this.lastTimeOrder = order;\n                console.log('order', order);\n                // swap arrow direction\n                const { items, count } = yield this.controller.model.getWinners({\n                    page: '1',\n                    limit: 10,\n                    sort: 'time',\n                    order: order,\n                });\n                this.draw(items);\n            }));\n        }\n        const sortWinsBtn = document.getElementById('sort-wins');\n        if (sortWinsBtn) {\n            sortWinsBtn.addEventListener('click', (e) => __awaiter(this, void 0, void 0, function* () {\n                const target = e.target;\n                let order = target.dataset.order == 'ASC' ? 'DESC' : 'ASC';\n                this.lastWinsOrder = order;\n                // swap arrow direction\n                const { items, count } = yield this.controller.model.getWinners({\n                    page: '1',\n                    limit: 10,\n                    sort: 'wins',\n                    order: order,\n                });\n                this.draw(items);\n            }));\n        }\n        const sortNameBtn = document.getElementById('sort-id');\n        if (sortNameBtn) {\n            sortNameBtn.addEventListener('click', (e) => __awaiter(this, void 0, void 0, function* () {\n                const target = e.target;\n                console.log(target);\n                console.log(target.dataset.order);\n                let order = target.dataset.order == 'ASC' ? 'DESC' : 'ASC';\n                this.lastNameOrder = order;\n                console.log('order', order);\n                // swap arrow direction\n                const { items, count } = yield this.controller.model.getWinners({\n                    page: '1',\n                    limit: 10,\n                    sort: 'id',\n                    order: order,\n                });\n                this.draw(items);\n            }));\n        }\n    }\n}\nexports[\"default\"] = WinnersView;\n\n\n//# sourceURL=webpack://async-race/./components/view/winnersView.ts?");

/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst controller_1 = __importDefault(__webpack_require__(/*! ./components/controller/controller */ \"./components/controller/controller.ts\"));\nconst app = new controller_1.default();\n\n\n//# sourceURL=webpack://async-race/./index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./index.ts");
/******/ 	
/******/ })()
;